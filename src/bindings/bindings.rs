/* automatically generated by rust-bindgen 0.70.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const NCCL_NET_HANDLE_MAXSIZE: u32 = 128;
pub const NCCL_PTR_HOST: u32 = 1;
pub const NCCL_PTR_CUDA: u32 = 2;
pub const NCCL_PTR_DMABUF: u32 = 4;
pub const NCCL_NET_MAX_REQUESTS: u32 = 32;
pub const NCCL_NET_DEVICE_UNPACK_VERSION: u32 = 7;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const ncclDebugLogLevel_NCCL_LOG_NONE: ncclDebugLogLevel = 0;
pub const ncclDebugLogLevel_NCCL_LOG_VERSION: ncclDebugLogLevel = 1;
pub const ncclDebugLogLevel_NCCL_LOG_WARN: ncclDebugLogLevel = 2;
pub const ncclDebugLogLevel_NCCL_LOG_INFO: ncclDebugLogLevel = 3;
pub const ncclDebugLogLevel_NCCL_LOG_ABORT: ncclDebugLogLevel = 4;
pub const ncclDebugLogLevel_NCCL_LOG_TRACE: ncclDebugLogLevel = 5;
pub type ncclDebugLogLevel = ::std::os::raw::c_uint;
pub type ncclDebugLogger_t = ::std::option::Option<
    unsafe extern "C" fn(
        level: ncclDebugLogLevel,
        flags: ::std::os::raw::c_ulong,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ),
>;
pub const ncclNetDeviceType_NCCL_NET_DEVICE_HOST: ncclNetDeviceType = 0;
pub const ncclNetDeviceType_NCCL_NET_DEVICE_UNPACK: ncclNetDeviceType = 1;
pub type ncclNetDeviceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncclNetDeviceHandle_v7_t {
    pub netDeviceType: ncclNetDeviceType,
    pub netDeviceVersion: ::std::os::raw::c_int,
    pub handle: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub needsProxyProgress: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of ncclNetDeviceHandle_v7_t"]
        [::std::mem::size_of::<ncclNetDeviceHandle_v7_t>() - 32usize];
    ["Alignment of ncclNetDeviceHandle_v7_t"]
        [::std::mem::align_of::<ncclNetDeviceHandle_v7_t>() - 8usize];
    ["Offset of field: ncclNetDeviceHandle_v7_t::netDeviceType"]
        [::std::mem::offset_of!(ncclNetDeviceHandle_v7_t, netDeviceType) - 0usize];
    ["Offset of field: ncclNetDeviceHandle_v7_t::netDeviceVersion"]
        [::std::mem::offset_of!(ncclNetDeviceHandle_v7_t, netDeviceVersion) - 4usize];
    ["Offset of field: ncclNetDeviceHandle_v7_t::handle"]
        [::std::mem::offset_of!(ncclNetDeviceHandle_v7_t, handle) - 8usize];
    ["Offset of field: ncclNetDeviceHandle_v7_t::size"]
        [::std::mem::offset_of!(ncclNetDeviceHandle_v7_t, size) - 16usize];
    ["Offset of field: ncclNetDeviceHandle_v7_t::needsProxyProgress"]
        [::std::mem::offset_of!(ncclNetDeviceHandle_v7_t, needsProxyProgress) - 24usize];
};
pub type ncclNetDeviceHandle_v8_t = ncclNetDeviceHandle_v7_t;
pub type ncclNetDeviceHandle_t = ncclNetDeviceHandle_v8_t;
pub const ncclResult_t_ncclSuccess: ncclResult_t = 0;
pub const ncclResult_t_ncclUnhandledCudaError: ncclResult_t = 1;
pub const ncclResult_t_ncclSystemError: ncclResult_t = 2;
pub const ncclResult_t_ncclInternalError: ncclResult_t = 3;
pub const ncclResult_t_ncclInvalidArgument: ncclResult_t = 4;
pub const ncclResult_t_ncclInvalidUsage: ncclResult_t = 5;
pub const ncclResult_t_ncclRemoteError: ncclResult_t = 6;
pub const ncclResult_t_ncclInProgress: ncclResult_t = 7;
pub const ncclResult_t_ncclNumResults: ncclResult_t = 8;
pub type ncclResult_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncclNetProperties_v8_t {
    pub name: *mut ::std::os::raw::c_char,
    pub pciPath: *mut ::std::os::raw::c_char,
    pub guid: u64,
    pub ptrSupport: ::std::os::raw::c_int,
    pub regIsGlobal: ::std::os::raw::c_int,
    pub speed: ::std::os::raw::c_int,
    pub port: ::std::os::raw::c_int,
    pub latency: f32,
    pub maxComms: ::std::os::raw::c_int,
    pub maxRecvs: ::std::os::raw::c_int,
    pub netDeviceType: ncclNetDeviceType,
    pub netDeviceVersion: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of ncclNetProperties_v8_t"][::std::mem::size_of::<ncclNetProperties_v8_t>() - 64usize];
    ["Alignment of ncclNetProperties_v8_t"]
        [::std::mem::align_of::<ncclNetProperties_v8_t>() - 8usize];
    ["Offset of field: ncclNetProperties_v8_t::name"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, name) - 0usize];
    ["Offset of field: ncclNetProperties_v8_t::pciPath"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, pciPath) - 8usize];
    ["Offset of field: ncclNetProperties_v8_t::guid"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, guid) - 16usize];
    ["Offset of field: ncclNetProperties_v8_t::ptrSupport"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, ptrSupport) - 24usize];
    ["Offset of field: ncclNetProperties_v8_t::regIsGlobal"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, regIsGlobal) - 28usize];
    ["Offset of field: ncclNetProperties_v8_t::speed"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, speed) - 32usize];
    ["Offset of field: ncclNetProperties_v8_t::port"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, port) - 36usize];
    ["Offset of field: ncclNetProperties_v8_t::latency"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, latency) - 40usize];
    ["Offset of field: ncclNetProperties_v8_t::maxComms"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, maxComms) - 44usize];
    ["Offset of field: ncclNetProperties_v8_t::maxRecvs"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, maxRecvs) - 48usize];
    ["Offset of field: ncclNetProperties_v8_t::netDeviceType"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, netDeviceType) - 52usize];
    ["Offset of field: ncclNetProperties_v8_t::netDeviceVersion"]
        [::std::mem::offset_of!(ncclNetProperties_v8_t, netDeviceVersion) - 56usize];
};
pub type ncclNetProperties_t = ncclNetProperties_v8_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ncclNet_v8_t {
    pub name: *const ::std::os::raw::c_char,
    pub init:
        ::std::option::Option<unsafe extern "C" fn(logFunction: ncclDebugLogger_t) -> ncclResult_t>,
    pub devices: ::std::option::Option<
        unsafe extern "C" fn(ndev: *mut ::std::os::raw::c_int) -> ncclResult_t,
    >,
    pub getProperties: ::std::option::Option<
        unsafe extern "C" fn(
            dev: ::std::os::raw::c_int,
            props: *mut ncclNetProperties_v8_t,
        ) -> ncclResult_t,
    >,
    pub listen: ::std::option::Option<
        unsafe extern "C" fn(
            dev: ::std::os::raw::c_int,
            handle: *mut ::std::os::raw::c_void,
            listenComm: *mut *mut ::std::os::raw::c_void,
        ) -> ncclResult_t,
    >,
    pub connect: ::std::option::Option<
        unsafe extern "C" fn(
            dev: ::std::os::raw::c_int,
            handle: *mut ::std::os::raw::c_void,
            sendComm: *mut *mut ::std::os::raw::c_void,
            sendDevComm: *mut *mut ncclNetDeviceHandle_v8_t,
        ) -> ncclResult_t,
    >,
    pub accept: ::std::option::Option<
        unsafe extern "C" fn(
            listenComm: *mut ::std::os::raw::c_void,
            recvComm: *mut *mut ::std::os::raw::c_void,
            recvDevComm: *mut *mut ncclNetDeviceHandle_v8_t,
        ) -> ncclResult_t,
    >,
    pub regMr: ::std::option::Option<
        unsafe extern "C" fn(
            comm: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_void,
            size: usize,
            type_: ::std::os::raw::c_int,
            mhandle: *mut *mut ::std::os::raw::c_void,
        ) -> ncclResult_t,
    >,
    pub regMrDmaBuf: ::std::option::Option<
        unsafe extern "C" fn(
            comm: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_void,
            size: usize,
            type_: ::std::os::raw::c_int,
            offset: u64,
            fd: ::std::os::raw::c_int,
            mhandle: *mut *mut ::std::os::raw::c_void,
        ) -> ncclResult_t,
    >,
    pub deregMr: ::std::option::Option<
        unsafe extern "C" fn(
            comm: *mut ::std::os::raw::c_void,
            mhandle: *mut ::std::os::raw::c_void,
        ) -> ncclResult_t,
    >,
    pub isend: ::std::option::Option<
        unsafe extern "C" fn(
            sendComm: *mut ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
            tag: ::std::os::raw::c_int,
            mhandle: *mut ::std::os::raw::c_void,
            request: *mut *mut ::std::os::raw::c_void,
        ) -> ncclResult_t,
    >,
    pub irecv: ::std::option::Option<
        unsafe extern "C" fn(
            recvComm: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
            sizes: *mut ::std::os::raw::c_int,
            tags: *mut ::std::os::raw::c_int,
            mhandles: *mut *mut ::std::os::raw::c_void,
            request: *mut *mut ::std::os::raw::c_void,
        ) -> ncclResult_t,
    >,
    pub iflush: ::std::option::Option<
        unsafe extern "C" fn(
            recvComm: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
            sizes: *mut ::std::os::raw::c_int,
            mhandles: *mut *mut ::std::os::raw::c_void,
            request: *mut *mut ::std::os::raw::c_void,
        ) -> ncclResult_t,
    >,
    pub test: ::std::option::Option<
        unsafe extern "C" fn(
            request: *mut ::std::os::raw::c_void,
            done: *mut ::std::os::raw::c_int,
            sizes: *mut ::std::os::raw::c_int,
        ) -> ncclResult_t,
    >,
    pub closeSend: ::std::option::Option<
        unsafe extern "C" fn(sendComm: *mut ::std::os::raw::c_void) -> ncclResult_t,
    >,
    pub closeRecv: ::std::option::Option<
        unsafe extern "C" fn(recvComm: *mut ::std::os::raw::c_void) -> ncclResult_t,
    >,
    pub closeListen: ::std::option::Option<
        unsafe extern "C" fn(listenComm: *mut ::std::os::raw::c_void) -> ncclResult_t,
    >,
    pub getDeviceMr: ::std::option::Option<
        unsafe extern "C" fn(
            comm: *mut ::std::os::raw::c_void,
            mhandle: *mut ::std::os::raw::c_void,
            dptr_mhandle: *mut *mut ::std::os::raw::c_void,
        ) -> ncclResult_t,
    >,
    pub irecvConsumed: ::std::option::Option<
        unsafe extern "C" fn(
            recvComm: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
            request: *mut ::std::os::raw::c_void,
        ) -> ncclResult_t,
    >,
}
const _: () = {
    ["Size of ncclNet_v8_t"][::std::mem::size_of::<ncclNet_v8_t>() - 152usize];
    ["Alignment of ncclNet_v8_t"][::std::mem::align_of::<ncclNet_v8_t>() - 8usize];
    ["Offset of field: ncclNet_v8_t::name"][::std::mem::offset_of!(ncclNet_v8_t, name) - 0usize];
    ["Offset of field: ncclNet_v8_t::init"][::std::mem::offset_of!(ncclNet_v8_t, init) - 8usize];
    ["Offset of field: ncclNet_v8_t::devices"]
        [::std::mem::offset_of!(ncclNet_v8_t, devices) - 16usize];
    ["Offset of field: ncclNet_v8_t::getProperties"]
        [::std::mem::offset_of!(ncclNet_v8_t, getProperties) - 24usize];
    ["Offset of field: ncclNet_v8_t::listen"]
        [::std::mem::offset_of!(ncclNet_v8_t, listen) - 32usize];
    ["Offset of field: ncclNet_v8_t::connect"]
        [::std::mem::offset_of!(ncclNet_v8_t, connect) - 40usize];
    ["Offset of field: ncclNet_v8_t::accept"]
        [::std::mem::offset_of!(ncclNet_v8_t, accept) - 48usize];
    ["Offset of field: ncclNet_v8_t::regMr"][::std::mem::offset_of!(ncclNet_v8_t, regMr) - 56usize];
    ["Offset of field: ncclNet_v8_t::regMrDmaBuf"]
        [::std::mem::offset_of!(ncclNet_v8_t, regMrDmaBuf) - 64usize];
    ["Offset of field: ncclNet_v8_t::deregMr"]
        [::std::mem::offset_of!(ncclNet_v8_t, deregMr) - 72usize];
    ["Offset of field: ncclNet_v8_t::isend"][::std::mem::offset_of!(ncclNet_v8_t, isend) - 80usize];
    ["Offset of field: ncclNet_v8_t::irecv"][::std::mem::offset_of!(ncclNet_v8_t, irecv) - 88usize];
    ["Offset of field: ncclNet_v8_t::iflush"]
        [::std::mem::offset_of!(ncclNet_v8_t, iflush) - 96usize];
    ["Offset of field: ncclNet_v8_t::test"][::std::mem::offset_of!(ncclNet_v8_t, test) - 104usize];
    ["Offset of field: ncclNet_v8_t::closeSend"]
        [::std::mem::offset_of!(ncclNet_v8_t, closeSend) - 112usize];
    ["Offset of field: ncclNet_v8_t::closeRecv"]
        [::std::mem::offset_of!(ncclNet_v8_t, closeRecv) - 120usize];
    ["Offset of field: ncclNet_v8_t::closeListen"]
        [::std::mem::offset_of!(ncclNet_v8_t, closeListen) - 128usize];
    ["Offset of field: ncclNet_v8_t::getDeviceMr"]
        [::std::mem::offset_of!(ncclNet_v8_t, getDeviceMr) - 136usize];
    ["Offset of field: ncclNet_v8_t::irecvConsumed"]
        [::std::mem::offset_of!(ncclNet_v8_t, irecvConsumed) - 144usize];
};
unsafe impl Send for ncclNet_v8_t {}
unsafe impl Sync for ncclNet_v8_t {}
